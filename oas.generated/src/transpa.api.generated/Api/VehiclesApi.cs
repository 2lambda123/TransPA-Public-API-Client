/*
 * TransPA Public API
 *
 * # This API exposes functionality in Visma TransPA. ## Authentication The API can be tested without authentication against the mock server in the **Servers** pulldown list. To test against the actual backend you have to register a user on the *Visma Developer Portal* and request access to the API along with the required scopes. The scopes required are documented under each endpoint. For more information about *Visma Developer Portal* see <https://developer.visma.com>. <br/> <br/>  Authentication uses OAuth tokens from *Visma Connect*. Authorization is done on tenant level, so one OAuth token is needed per tenant.<br/> <br/> The scope `transpaapi:api` grants basic access to the API and is required for all routes. Additional scopes might be required and are described inside each route description. <br/> ## Details All monetary amounts are in the organizations local currency unless otherwise specified. <br/> <br/> ```[Not Ready]``` This is an endpoint where development has not completed and is therefore subject to change. 
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: utveckling.transpa@visma.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using transpa.api.generated.Client;
using transpa.api.generated.Model;

namespace transpa.api.generated.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVehiclesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a vehicle
        /// </summary>
        /// <remarks>
        /// Delete a vehicle  Required scope transpaapi:vehicles:delete 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <returns></returns>
        void DeleteVehicle(string id);

        /// <summary>
        /// Delete a vehicle
        /// </summary>
        /// <remarks>
        /// Delete a vehicle  Required scope transpaapi:vehicles:delete 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVehicleWithHttpInfo(string id);
        /// <summary>
        /// Get a vehicle
        /// </summary>
        /// <remarks>
        /// Get a single vehicle by id  Required scope transpaapi:vehicles:read 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <returns>Vehicle</returns>
        Vehicle GetVehicle(string id);

        /// <summary>
        /// Get a vehicle
        /// </summary>
        /// <remarks>
        /// Get a single vehicle by id  Required scope transpaapi:vehicles:read 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <returns>ApiResponse of Vehicle</returns>
        ApiResponse<Vehicle> GetVehicleWithHttpInfo(string id);
        /// <summary>
        /// Return a list of vehicles
        /// </summary>
        /// <remarks>
        /// Retrieves all vehicles the tenant have access to.  Required scope transpaapi:vehicles:read 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">Pagination token used to query for the next part of a list. (optional)</param>
        /// <param name="limit">Limits the number of Vehicles returned. Default and maximum is 100 (optional)</param>
        /// <param name="includeInactive">Will include non active vehicles if set to true (optional, default to false)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetVehicles(string cursor = default(string), int? limit = default(int?), bool? includeInactive = default(bool?));

        /// <summary>
        /// Return a list of vehicles
        /// </summary>
        /// <remarks>
        /// Retrieves all vehicles the tenant have access to.  Required scope transpaapi:vehicles:read 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">Pagination token used to query for the next part of a list. (optional)</param>
        /// <param name="limit">Limits the number of Vehicles returned. Default and maximum is 100 (optional)</param>
        /// <param name="includeInactive">Will include non active vehicles if set to true (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetVehiclesWithHttpInfo(string cursor = default(string), int? limit = default(int?), bool? includeInactive = default(bool?));
        /// <summary>
        /// Create a vehicle
        /// </summary>
        /// <remarks>
        /// Create a Vehicle  Required scope transpaapi:vehicles:write 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicle"></param>
        /// <returns>Vehicle</returns>
        Vehicle PostVehicle(Vehicle vehicle);

        /// <summary>
        /// Create a vehicle
        /// </summary>
        /// <remarks>
        /// Create a Vehicle  Required scope transpaapi:vehicles:write 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicle"></param>
        /// <returns>ApiResponse of Vehicle</returns>
        ApiResponse<Vehicle> PostVehicleWithHttpInfo(Vehicle vehicle);
        /// <summary>
        /// Update a vehicle
        /// </summary>
        /// <remarks>
        /// Update a vehicle  Required scope transpaapi:vehicles:write 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <returns>Vehicle</returns>
        Vehicle PutVehicle(string id);

        /// <summary>
        /// Update a vehicle
        /// </summary>
        /// <remarks>
        /// Update a vehicle  Required scope transpaapi:vehicles:write 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <returns>ApiResponse of Vehicle</returns>
        ApiResponse<Vehicle> PutVehicleWithHttpInfo(string id);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVehiclesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a vehicle
        /// </summary>
        /// <remarks>
        /// Delete a vehicle  Required scope transpaapi:vehicles:delete 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVehicleAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a vehicle
        /// </summary>
        /// <remarks>
        /// Delete a vehicle  Required scope transpaapi:vehicles:delete 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVehicleWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a vehicle
        /// </summary>
        /// <remarks>
        /// Get a single vehicle by id  Required scope transpaapi:vehicles:read 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Vehicle</returns>
        System.Threading.Tasks.Task<Vehicle> GetVehicleAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a vehicle
        /// </summary>
        /// <remarks>
        /// Get a single vehicle by id  Required scope transpaapi:vehicles:read 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Vehicle)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vehicle>> GetVehicleWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return a list of vehicles
        /// </summary>
        /// <remarks>
        /// Retrieves all vehicles the tenant have access to.  Required scope transpaapi:vehicles:read 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">Pagination token used to query for the next part of a list. (optional)</param>
        /// <param name="limit">Limits the number of Vehicles returned. Default and maximum is 100 (optional)</param>
        /// <param name="includeInactive">Will include non active vehicles if set to true (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetVehiclesAsync(string cursor = default(string), int? limit = default(int?), bool? includeInactive = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return a list of vehicles
        /// </summary>
        /// <remarks>
        /// Retrieves all vehicles the tenant have access to.  Required scope transpaapi:vehicles:read 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">Pagination token used to query for the next part of a list. (optional)</param>
        /// <param name="limit">Limits the number of Vehicles returned. Default and maximum is 100 (optional)</param>
        /// <param name="includeInactive">Will include non active vehicles if set to true (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetVehiclesWithHttpInfoAsync(string cursor = default(string), int? limit = default(int?), bool? includeInactive = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a vehicle
        /// </summary>
        /// <remarks>
        /// Create a Vehicle  Required scope transpaapi:vehicles:write 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicle"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Vehicle</returns>
        System.Threading.Tasks.Task<Vehicle> PostVehicleAsync(Vehicle vehicle, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a vehicle
        /// </summary>
        /// <remarks>
        /// Create a Vehicle  Required scope transpaapi:vehicles:write 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicle"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Vehicle)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vehicle>> PostVehicleWithHttpInfoAsync(Vehicle vehicle, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a vehicle
        /// </summary>
        /// <remarks>
        /// Update a vehicle  Required scope transpaapi:vehicles:write 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Vehicle</returns>
        System.Threading.Tasks.Task<Vehicle> PutVehicleAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a vehicle
        /// </summary>
        /// <remarks>
        /// Update a vehicle  Required scope transpaapi:vehicles:write 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Vehicle)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vehicle>> PutVehicleWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVehiclesApi : IVehiclesApiSync, IVehiclesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VehiclesApi : IVehiclesApi
    {
        private transpa.api.generated.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VehiclesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VehiclesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VehiclesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VehiclesApi(string basePath)
        {
            this.Configuration = transpa.api.generated.Client.Configuration.MergeConfigurations(
                transpa.api.generated.Client.GlobalConfiguration.Instance,
                new transpa.api.generated.Client.Configuration { BasePath = basePath }
            );
            this.Client = new transpa.api.generated.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new transpa.api.generated.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = transpa.api.generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VehiclesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VehiclesApi(transpa.api.generated.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = transpa.api.generated.Client.Configuration.MergeConfigurations(
                transpa.api.generated.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new transpa.api.generated.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new transpa.api.generated.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = transpa.api.generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VehiclesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VehiclesApi(transpa.api.generated.Client.ISynchronousClient client, transpa.api.generated.Client.IAsynchronousClient asyncClient, transpa.api.generated.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = transpa.api.generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public transpa.api.generated.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public transpa.api.generated.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public transpa.api.generated.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public transpa.api.generated.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a vehicle Delete a vehicle  Required scope transpaapi:vehicles:delete 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <returns></returns>
        public void DeleteVehicle(string id)
        {
            DeleteVehicleWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a vehicle Delete a vehicle  Required scope transpaapi:vehicles:delete 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public transpa.api.generated.Client.ApiResponse<Object> DeleteVehicleWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new transpa.api.generated.Client.ApiException(400, "Missing required parameter 'id' when calling VehiclesApi->DeleteVehicle");

            transpa.api.generated.Client.RequestOptions localVarRequestOptions = new transpa.api.generated.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/problem+json"
            };

            var localVarContentType = transpa.api.generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = transpa.api.generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", transpa.api.generated.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (visma_connect) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/vehicles/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVehicle", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a vehicle Delete a vehicle  Required scope transpaapi:vehicles:delete 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVehicleAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteVehicleWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a vehicle Delete a vehicle  Required scope transpaapi:vehicles:delete 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<transpa.api.generated.Client.ApiResponse<Object>> DeleteVehicleWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new transpa.api.generated.Client.ApiException(400, "Missing required parameter 'id' when calling VehiclesApi->DeleteVehicle");


            transpa.api.generated.Client.RequestOptions localVarRequestOptions = new transpa.api.generated.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/problem+json"
            };


            var localVarContentType = transpa.api.generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = transpa.api.generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", transpa.api.generated.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (visma_connect) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/vehicles/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVehicle", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a vehicle Get a single vehicle by id  Required scope transpaapi:vehicles:read 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <returns>Vehicle</returns>
        public Vehicle GetVehicle(string id)
        {
            transpa.api.generated.Client.ApiResponse<Vehicle> localVarResponse = GetVehicleWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a vehicle Get a single vehicle by id  Required scope transpaapi:vehicles:read 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <returns>ApiResponse of Vehicle</returns>
        public transpa.api.generated.Client.ApiResponse<Vehicle> GetVehicleWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new transpa.api.generated.Client.ApiException(400, "Missing required parameter 'id' when calling VehiclesApi->GetVehicle");

            transpa.api.generated.Client.RequestOptions localVarRequestOptions = new transpa.api.generated.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = transpa.api.generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = transpa.api.generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", transpa.api.generated.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (visma_connect) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Vehicle>("/v1/vehicles/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVehicle", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a vehicle Get a single vehicle by id  Required scope transpaapi:vehicles:read 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Vehicle</returns>
        public async System.Threading.Tasks.Task<Vehicle> GetVehicleAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            transpa.api.generated.Client.ApiResponse<Vehicle> localVarResponse = await GetVehicleWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a vehicle Get a single vehicle by id  Required scope transpaapi:vehicles:read 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Vehicle)</returns>
        public async System.Threading.Tasks.Task<transpa.api.generated.Client.ApiResponse<Vehicle>> GetVehicleWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new transpa.api.generated.Client.ApiException(400, "Missing required parameter 'id' when calling VehiclesApi->GetVehicle");


            transpa.api.generated.Client.RequestOptions localVarRequestOptions = new transpa.api.generated.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = transpa.api.generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = transpa.api.generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", transpa.api.generated.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (visma_connect) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Vehicle>("/v1/vehicles/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVehicle", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a list of vehicles Retrieves all vehicles the tenant have access to.  Required scope transpaapi:vehicles:read 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">Pagination token used to query for the next part of a list. (optional)</param>
        /// <param name="limit">Limits the number of Vehicles returned. Default and maximum is 100 (optional)</param>
        /// <param name="includeInactive">Will include non active vehicles if set to true (optional, default to false)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetVehicles(string cursor = default(string), int? limit = default(int?), bool? includeInactive = default(bool?))
        {
            transpa.api.generated.Client.ApiResponse<InlineResponse2004> localVarResponse = GetVehiclesWithHttpInfo(cursor, limit, includeInactive);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return a list of vehicles Retrieves all vehicles the tenant have access to.  Required scope transpaapi:vehicles:read 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">Pagination token used to query for the next part of a list. (optional)</param>
        /// <param name="limit">Limits the number of Vehicles returned. Default and maximum is 100 (optional)</param>
        /// <param name="includeInactive">Will include non active vehicles if set to true (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public transpa.api.generated.Client.ApiResponse<InlineResponse2004> GetVehiclesWithHttpInfo(string cursor = default(string), int? limit = default(int?), bool? includeInactive = default(bool?))
        {
            transpa.api.generated.Client.RequestOptions localVarRequestOptions = new transpa.api.generated.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = transpa.api.generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = transpa.api.generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(transpa.api.generated.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(transpa.api.generated.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (includeInactive != null)
            {
                localVarRequestOptions.QueryParameters.Add(transpa.api.generated.Client.ClientUtils.ParameterToMultiMap("", "includeInactive", includeInactive));
            }

            // authentication (visma_connect) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2004>("/v1/vehicles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVehicles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a list of vehicles Retrieves all vehicles the tenant have access to.  Required scope transpaapi:vehicles:read 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">Pagination token used to query for the next part of a list. (optional)</param>
        /// <param name="limit">Limits the number of Vehicles returned. Default and maximum is 100 (optional)</param>
        /// <param name="includeInactive">Will include non active vehicles if set to true (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> GetVehiclesAsync(string cursor = default(string), int? limit = default(int?), bool? includeInactive = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            transpa.api.generated.Client.ApiResponse<InlineResponse2004> localVarResponse = await GetVehiclesWithHttpInfoAsync(cursor, limit, includeInactive, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return a list of vehicles Retrieves all vehicles the tenant have access to.  Required scope transpaapi:vehicles:read 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">Pagination token used to query for the next part of a list. (optional)</param>
        /// <param name="limit">Limits the number of Vehicles returned. Default and maximum is 100 (optional)</param>
        /// <param name="includeInactive">Will include non active vehicles if set to true (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<transpa.api.generated.Client.ApiResponse<InlineResponse2004>> GetVehiclesWithHttpInfoAsync(string cursor = default(string), int? limit = default(int?), bool? includeInactive = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            transpa.api.generated.Client.RequestOptions localVarRequestOptions = new transpa.api.generated.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = transpa.api.generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = transpa.api.generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(transpa.api.generated.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(transpa.api.generated.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (includeInactive != null)
            {
                localVarRequestOptions.QueryParameters.Add(transpa.api.generated.Client.ClientUtils.ParameterToMultiMap("", "includeInactive", includeInactive));
            }

            // authentication (visma_connect) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2004>("/v1/vehicles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVehicles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a vehicle Create a Vehicle  Required scope transpaapi:vehicles:write 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicle"></param>
        /// <returns>Vehicle</returns>
        public Vehicle PostVehicle(Vehicle vehicle)
        {
            transpa.api.generated.Client.ApiResponse<Vehicle> localVarResponse = PostVehicleWithHttpInfo(vehicle);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a vehicle Create a Vehicle  Required scope transpaapi:vehicles:write 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicle"></param>
        /// <returns>ApiResponse of Vehicle</returns>
        public transpa.api.generated.Client.ApiResponse<Vehicle> PostVehicleWithHttpInfo(Vehicle vehicle)
        {
            // verify the required parameter 'vehicle' is set
            if (vehicle == null)
                throw new transpa.api.generated.Client.ApiException(400, "Missing required parameter 'vehicle' when calling VehiclesApi->PostVehicle");

            transpa.api.generated.Client.RequestOptions localVarRequestOptions = new transpa.api.generated.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = transpa.api.generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = transpa.api.generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = vehicle;

            // authentication (visma_connect) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Vehicle>("/v1/vehicles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVehicle", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a vehicle Create a Vehicle  Required scope transpaapi:vehicles:write 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicle"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Vehicle</returns>
        public async System.Threading.Tasks.Task<Vehicle> PostVehicleAsync(Vehicle vehicle, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            transpa.api.generated.Client.ApiResponse<Vehicle> localVarResponse = await PostVehicleWithHttpInfoAsync(vehicle, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a vehicle Create a Vehicle  Required scope transpaapi:vehicles:write 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicle"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Vehicle)</returns>
        public async System.Threading.Tasks.Task<transpa.api.generated.Client.ApiResponse<Vehicle>> PostVehicleWithHttpInfoAsync(Vehicle vehicle, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vehicle' is set
            if (vehicle == null)
                throw new transpa.api.generated.Client.ApiException(400, "Missing required parameter 'vehicle' when calling VehiclesApi->PostVehicle");


            transpa.api.generated.Client.RequestOptions localVarRequestOptions = new transpa.api.generated.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = transpa.api.generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = transpa.api.generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = vehicle;

            // authentication (visma_connect) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Vehicle>("/v1/vehicles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVehicle", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a vehicle Update a vehicle  Required scope transpaapi:vehicles:write 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <returns>Vehicle</returns>
        public Vehicle PutVehicle(string id)
        {
            transpa.api.generated.Client.ApiResponse<Vehicle> localVarResponse = PutVehicleWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a vehicle Update a vehicle  Required scope transpaapi:vehicles:write 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <returns>ApiResponse of Vehicle</returns>
        public transpa.api.generated.Client.ApiResponse<Vehicle> PutVehicleWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new transpa.api.generated.Client.ApiException(400, "Missing required parameter 'id' when calling VehiclesApi->PutVehicle");

            transpa.api.generated.Client.RequestOptions localVarRequestOptions = new transpa.api.generated.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = transpa.api.generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = transpa.api.generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", transpa.api.generated.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (visma_connect) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Vehicle>("/v1/vehicles/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutVehicle", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a vehicle Update a vehicle  Required scope transpaapi:vehicles:write 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Vehicle</returns>
        public async System.Threading.Tasks.Task<Vehicle> PutVehicleAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            transpa.api.generated.Client.ApiResponse<Vehicle> localVarResponse = await PutVehicleWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a vehicle Update a vehicle  Required scope transpaapi:vehicles:write 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Resource ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Vehicle)</returns>
        public async System.Threading.Tasks.Task<transpa.api.generated.Client.ApiResponse<Vehicle>> PutVehicleWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new transpa.api.generated.Client.ApiException(400, "Missing required parameter 'id' when calling VehiclesApi->PutVehicle");


            transpa.api.generated.Client.RequestOptions localVarRequestOptions = new transpa.api.generated.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = transpa.api.generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = transpa.api.generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", transpa.api.generated.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (visma_connect) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Vehicle>("/v1/vehicles/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutVehicle", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
