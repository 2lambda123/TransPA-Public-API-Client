/*
 * TransPA Public API
 *
 * # This API exposes functionality in Visma TransPA. ## Authentication The API can be tested without authentication against the mock server in the **Servers** pulldown list. To test against the actual backend you have to register a user on the *Visma Developer Portal* and request access to the API along with the required scopes. The scopes required are documented under each endpoint. For more information about *Visma Developer Portal* see <https://developer.visma.com>. <br/> <br/>  Authentication uses OAuth tokens from *Visma Connect*. Authorization is done on tenant level, so one OAuth token is needed per tenant.<br/> <br/> The scope `transpaapi:api` grants basic access to the API and is required for all routes. Additional scopes might be required and are described inside each route description. <br/> ## Details All monetary amounts are in the organizations local currency unless otherwise specified. <br/> <br/> ```[Not Ready]``` This is an endpoint where development has not completed and is therefore subject to change. 
 *
 * The version of the OpenAPI document: 0.1.15
 * Contact: utveckling.transpa@visma.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using transpa.api.generated.Client;
using transpa.api.generated.Model;

namespace transpa.api.generated.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns a list of ConnectUsers for every SystemUser in TransPA
        /// </summary>
        /// <remarks>
        /// Returns a list of ConnectUsers for every SystemUser in TransPA.  This route is intended for internal Visma use only.  Required scope transpaapi:connectusers:read 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">Pagination token used to query for the next part of a list. (optional)</param>
        /// <param name="limit">Limits the number of SystemUsers returned. Default and maximum is 100 (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetConnectUserController(string cursor = default(string), int? limit = default(int?));

        /// <summary>
        /// Returns a list of ConnectUsers for every SystemUser in TransPA
        /// </summary>
        /// <remarks>
        /// Returns a list of ConnectUsers for every SystemUser in TransPA.  This route is intended for internal Visma use only.  Required scope transpaapi:connectusers:read 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">Pagination token used to query for the next part of a list. (optional)</param>
        /// <param name="limit">Limits the number of SystemUsers returned. Default and maximum is 100 (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetConnectUserControllerWithHttpInfo(string cursor = default(string), int? limit = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns a list of ConnectUsers for every SystemUser in TransPA
        /// </summary>
        /// <remarks>
        /// Returns a list of ConnectUsers for every SystemUser in TransPA.  This route is intended for internal Visma use only.  Required scope transpaapi:connectusers:read 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">Pagination token used to query for the next part of a list. (optional)</param>
        /// <param name="limit">Limits the number of SystemUsers returned. Default and maximum is 100 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetConnectUserControllerAsync(string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of ConnectUsers for every SystemUser in TransPA
        /// </summary>
        /// <remarks>
        /// Returns a list of ConnectUsers for every SystemUser in TransPA.  This route is intended for internal Visma use only.  Required scope transpaapi:connectusers:read 
        /// </remarks>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">Pagination token used to query for the next part of a list. (optional)</param>
        /// <param name="limit">Limits the number of SystemUsers returned. Default and maximum is 100 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetConnectUserControllerWithHttpInfoAsync(string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectUsersApi : IConnectUsersApiSync, IConnectUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConnectUsersApi : IConnectUsersApi
    {
        private transpa.api.generated.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectUsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectUsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectUsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectUsersApi(string basePath)
        {
            this.Configuration = transpa.api.generated.Client.Configuration.MergeConfigurations(
                transpa.api.generated.Client.GlobalConfiguration.Instance,
                new transpa.api.generated.Client.Configuration { BasePath = basePath }
            );
            this.Client = new transpa.api.generated.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new transpa.api.generated.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = transpa.api.generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectUsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConnectUsersApi(transpa.api.generated.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = transpa.api.generated.Client.Configuration.MergeConfigurations(
                transpa.api.generated.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new transpa.api.generated.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new transpa.api.generated.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = transpa.api.generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectUsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConnectUsersApi(transpa.api.generated.Client.ISynchronousClient client, transpa.api.generated.Client.IAsynchronousClient asyncClient, transpa.api.generated.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = transpa.api.generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public transpa.api.generated.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public transpa.api.generated.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public transpa.api.generated.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public transpa.api.generated.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns a list of ConnectUsers for every SystemUser in TransPA Returns a list of ConnectUsers for every SystemUser in TransPA.  This route is intended for internal Visma use only.  Required scope transpaapi:connectusers:read 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">Pagination token used to query for the next part of a list. (optional)</param>
        /// <param name="limit">Limits the number of SystemUsers returned. Default and maximum is 100 (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetConnectUserController(string cursor = default(string), int? limit = default(int?))
        {
            transpa.api.generated.Client.ApiResponse<InlineResponse200> localVarResponse = GetConnectUserControllerWithHttpInfo(cursor, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of ConnectUsers for every SystemUser in TransPA Returns a list of ConnectUsers for every SystemUser in TransPA.  This route is intended for internal Visma use only.  Required scope transpaapi:connectusers:read 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">Pagination token used to query for the next part of a list. (optional)</param>
        /// <param name="limit">Limits the number of SystemUsers returned. Default and maximum is 100 (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public transpa.api.generated.Client.ApiResponse<InlineResponse200> GetConnectUserControllerWithHttpInfo(string cursor = default(string), int? limit = default(int?))
        {
            transpa.api.generated.Client.RequestOptions localVarRequestOptions = new transpa.api.generated.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = transpa.api.generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = transpa.api.generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(transpa.api.generated.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(transpa.api.generated.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (visma_connect) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse200>("/v1/connectUsers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectUserController", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of ConnectUsers for every SystemUser in TransPA Returns a list of ConnectUsers for every SystemUser in TransPA.  This route is intended for internal Visma use only.  Required scope transpaapi:connectusers:read 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">Pagination token used to query for the next part of a list. (optional)</param>
        /// <param name="limit">Limits the number of SystemUsers returned. Default and maximum is 100 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetConnectUserControllerAsync(string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            transpa.api.generated.Client.ApiResponse<InlineResponse200> localVarResponse = await GetConnectUserControllerWithHttpInfoAsync(cursor, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of ConnectUsers for every SystemUser in TransPA Returns a list of ConnectUsers for every SystemUser in TransPA.  This route is intended for internal Visma use only.  Required scope transpaapi:connectusers:read 
        /// </summary>
        /// <exception cref="transpa.api.generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">Pagination token used to query for the next part of a list. (optional)</param>
        /// <param name="limit">Limits the number of SystemUsers returned. Default and maximum is 100 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<transpa.api.generated.Client.ApiResponse<InlineResponse200>> GetConnectUserControllerWithHttpInfoAsync(string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            transpa.api.generated.Client.RequestOptions localVarRequestOptions = new transpa.api.generated.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = transpa.api.generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = transpa.api.generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(transpa.api.generated.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(transpa.api.generated.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (visma_connect) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/v1/connectUsers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectUserController", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
