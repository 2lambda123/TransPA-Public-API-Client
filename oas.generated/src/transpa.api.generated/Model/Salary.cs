/*
 * TransPA Public API
 *
 * # This API exposes functionality in Visma TransPA. ## Authentication The API can be tested without authentication against the mock server in the **Servers** pulldown list. To test against the actual backend you have to register a user on the *Visma Developer Portal* and request access to the API along with the required scopes. The scopes required are documented under each endpoint. For more information about *Visma Developer Portal* see <https://developer.visma.com>. <br/> <br/>  Authentication uses OAuth tokens from *Visma Connect*. Authorization is done on tenant level, so one OAuth token is needed per tenant.<br/> <br/> The scope `transpaapi:api` grants basic access to the API and is required for all routes. Additional scopes might be required and are described inside each route description. <br/> ## Details All monetary amounts are in the organizations local currency unless otherwise specified. <br/> <br/> ```[Not Ready]``` This is an endpoint where development has not completed and is therefore subject to change. 
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: utveckling.transpa@visma.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = transpa.api.generated.Client.OpenAPIDateConverter;

namespace transpa.api.generated.Model
{
    /// <summary>
    /// Salary
    /// </summary>
    [DataContract(Name = "salary")]
    public partial class Salary : IEquatable<Salary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Salary" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="startDate">The first date of the wage period.</param>
        /// <param name="endDate">The last date of the wage period.</param>
        /// <param name="employeeId">employeeId.</param>
        /// <param name="wageRows">wageRows.</param>
        /// <param name="timeRows">timeRows.</param>
        public Salary(string id = default(string), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), string employeeId = default(string), List<SalaryWageRows> wageRows = default(List<SalaryWageRows>), List<SalaryTimeRows> timeRows = default(List<SalaryTimeRows>))
        {
            this.Id = id;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.EmployeeId = employeeId;
            this.WageRows = wageRows;
            this.TimeRows = timeRows;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The first date of the wage period
        /// </summary>
        /// <value>The first date of the wage period</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// The last date of the wage period
        /// </summary>
        /// <value>The last date of the wage period</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeId
        /// </summary>
        [DataMember(Name = "employeeId", EmitDefaultValue = false)]
        public string EmployeeId { get; set; }

        /// <summary>
        /// Gets or Sets WageRows
        /// </summary>
        [DataMember(Name = "wageRows", EmitDefaultValue = false)]
        public List<SalaryWageRows> WageRows { get; set; }

        /// <summary>
        /// Gets or Sets TimeRows
        /// </summary>
        [DataMember(Name = "timeRows", EmitDefaultValue = false)]
        public List<SalaryTimeRows> TimeRows { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Salary {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EmployeeId: ").Append(EmployeeId).Append("\n");
            sb.Append("  WageRows: ").Append(WageRows).Append("\n");
            sb.Append("  TimeRows: ").Append(TimeRows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Salary);
        }

        /// <summary>
        /// Returns true if Salary instances are equal
        /// </summary>
        /// <param name="input">Instance of Salary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Salary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.EmployeeId == input.EmployeeId ||
                    (this.EmployeeId != null &&
                    this.EmployeeId.Equals(input.EmployeeId))
                ) && 
                (
                    this.WageRows == input.WageRows ||
                    this.WageRows != null &&
                    input.WageRows != null &&
                    this.WageRows.SequenceEqual(input.WageRows)
                ) && 
                (
                    this.TimeRows == input.TimeRows ||
                    this.TimeRows != null &&
                    input.TimeRows != null &&
                    this.TimeRows.SequenceEqual(input.TimeRows)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.EmployeeId != null)
                    hashCode = hashCode * 59 + this.EmployeeId.GetHashCode();
                if (this.WageRows != null)
                    hashCode = hashCode * 59 + this.WageRows.GetHashCode();
                if (this.TimeRows != null)
                    hashCode = hashCode * 59 + this.TimeRows.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
