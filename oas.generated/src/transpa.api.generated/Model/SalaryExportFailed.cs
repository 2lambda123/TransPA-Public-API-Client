/*
 * TransPA Public API
 *
 * # This API exposes functionality in Visma TransPA. ## Authentication The API can be tested without authentication against the mock server in the **Servers** pulldown list. To test against the actual backend you have to register a user on the *Visma Developer Portal* and request access to the API along with the required scopes. The scopes required are documented under each endpoint. For more information about *Visma Developer Portal* see <https://developer.visma.com>. <br/> <br/>  Authentication uses OAuth tokens from *Visma Connect*. Authorization is done on tenant level, so one OAuth token is needed per tenant.<br/> <br/> The scope `transpaapi:api` grants basic access to the API and is required for all routes. Additional scopes might be required and are described inside each route description. <br/> ## Details All monetary amounts are in the organizations local currency unless otherwise specified. <br/> <br/> ```[Not Ready]``` This is an endpoint where development has not completed and is therefore subject to change. 
 *
 * The version of the OpenAPI document: 0.1.21
 * Contact: utveckling.transpa@visma.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = transpa.api.generated.Client.OpenAPIDateConverter;

namespace transpa.api.generated.Model
{
    /// <summary>
    /// SalaryExportFailed
    /// </summary>
    [DataContract(Name = "salaryExportFailed")]
    public partial class SalaryExportFailed : IEquatable<SalaryExportFailed>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalaryExportFailed" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SalaryExportFailed() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SalaryExportFailed" /> class.
        /// </summary>
        /// <param name="statusCode">statusCode (required).</param>
        /// <param name="customInfo">customInfo.</param>
        public SalaryExportFailed(string statusCode = default(string), string customInfo = default(string))
        {
            // to ensure "statusCode" is required (not null)
            if (statusCode == null) {
                throw new ArgumentNullException("statusCode is a required property for SalaryExportFailed and cannot be null");
            }
            this.StatusCode = statusCode;
            this.CustomInfo = customInfo;
        }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name = "statusCode", IsRequired = true, EmitDefaultValue = false)]
        public string StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets CustomInfo
        /// </summary>
        [DataMember(Name = "customInfo", EmitDefaultValue = false)]
        public string CustomInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalaryExportFailed {\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  CustomInfo: ").Append(CustomInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalaryExportFailed);
        }

        /// <summary>
        /// Returns true if SalaryExportFailed instances are equal
        /// </summary>
        /// <param name="input">Instance of SalaryExportFailed to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalaryExportFailed input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.CustomInfo == input.CustomInfo ||
                    (this.CustomInfo != null &&
                    this.CustomInfo.Equals(input.CustomInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.CustomInfo != null)
                    hashCode = hashCode * 59 + this.CustomInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CustomInfo (string) maxLength
            if(this.CustomInfo != null && this.CustomInfo.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomInfo, length must be less than 150.", new [] { "CustomInfo" });
            }

            yield break;
        }
    }

}
